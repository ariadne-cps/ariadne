language: cpp

sudo: enabled
dist: trusty

branches:
  only:
  - master
  - working
  - working-ci

matrix:
  include:

    - name: macOS 10.13 + AppleClang 10 + Python 3
      os: osx
      osx_image: xcode10
      env: COMPILER=clang++ PYTHON=3

    - name: macOS 10.13 + GCC 8 + Python 2
      os: osx
      osx_image: xcode10
      env: COMPILER=g++-8 PYTHON=2

    - name: Ubuntu 18.04 + Clang 5 + Python 2
      os: linux
      services:
        - docker      
      env: DOCKER=ubuntu:latest COMPILER=clang++-5.0 PYTHON=2
      
    - name: Ubuntu 18.04 + GCC 8 + Python 3
      os: linux
      services:
        - docker
      env: DOCKER=ubuntu:latest COMPILER=g++-8 PYTHON=3

    - name: Coverage
      os: linux
      services:
        - docker
      env: DOCKER=ubuntu:latest COMPILER=g++-7 PYTHON=3 COVERAGE=ON

before_install:
  - if [[ "$PYTHON" == "3" ]]; then PYTHON_LIB='python3'; else PYTHON_LIB=python; fi 
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew cask uninstall --force oclint; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install gcc@8 mpfr gmp gtk cairo; fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      sudo easy_install pip
      sudo pip$PYTHON install --upgrade pip
      sudo pip$PYTHON install coverage pytest
    fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      docker pull $DOCKER
      CONTAINER_ID=$(docker run --detach --tty --volume="$PWD":/ariadne --workdir=/ariadne $DOCKER)
      SH_PREFIX="docker exec --tty $CONTAINER_ID"
      $SH_PREFIX apt update
      $SH_PREFIX apt install -y cmake   
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then APT_INSTALL_STRING="apt install -y $COMPILER $PYTHON_LIB-pip lib$PYTHON_LIB-dev libgtk2.0-dev libcairo2-dev libmpfr-dev libgmp-dev"; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then PIP_INSTALL_STRING="pip$PYTHON install coverage pytest"; fi   
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then $SH_PREFIX sh -c "$APT_INSTALL_STRING"; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then $SH_PREFIX sh -c "$PIP_INSTALL_STRING"; fi

script:
  - CMAKE_ARGS="-DCMAKE_CXX_COMPILER=$COMPILER -DPYBIND11_PYTHON_VERSION=$PYTHON"
  - if [[ -n "$COVERAGE" ]]; then CMAKE_ARGS="$CMAKE_ARGS -DCOVERAGE=ON"; fi
  - if [[ -n "$COVERAGE" ]]; then CMAKE_BUILD_TYPE="Debug"; else CMAKE_BUILD_TYPE="Release"; fi 
  - if [[ "$TRAVIS_BRANCH" == master ]]; then CMAKE_ARGS="$CMAKE_ARGS -DWERROR=ON"; fi
  - CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE"
  - $SH_PREFIX cmake . $CMAKE_ARGS
  - if [[ -n "$COVERAGE" ]]; then $SH_PREFIX make tests pyariadne; else $SH_PREFIX make; fi
  - $SH_PREFIX ctest -L "primary" -LE "python"
  - if [[ -z "$COVERAGE" ]]; then $SH_PREFIX make install; fi
  - if [[ -z "$COVERAGE" ]]; then $SH_PREFIX sh -c 'cp -Rf tutorials ~/tutorials'; fi
  - if [[ -z "$COVERAGE" ]]; then $SH_PREFIX sh -c 'cd ~/tutorials/hybrid_evolution && cmake . '$CMAKE_ARGS; fi
  - if [[ -z "$COVERAGE" ]]; then $SH_PREFIX sh -c 'cd ~/tutorials/hybrid_evolution && make'; fi  
  - if [[ -z "$COVERAGE" ]]; then $SH_PREFIX sh -c 'cd ~/tutorials/hybrid_evolution && ./hybrid_evolution_tutorial -v 0 > /dev/null'; fi
  - if [[ -z "$COVERAGE" ]]; then $SH_PREFIX sh -c 'cd ~/tutorials/rigorous_numerics && cmake . '$CMAKE_ARGS; fi
  - if [[ -z "$COVERAGE" ]]; then $SH_PREFIX sh -c 'cd ~/tutorials/rigorous_numerics && make'; fi  
  - if [[ -z "$COVERAGE" ]]; then $SH_PREFIX sh -c 'cd ~/tutorials/rigorous_numerics && ./rigorous_numerics_tutorial > /dev/null'; fi
 # - if [[ -z "$COVERAGE" ]]; then $SH_PREFIX sh -c 'cd ~/tutorials/python_interface && python'$PYTHON' -m tutorial.py > /dev/null'; fi  
  
after_success:
  - if [[ -n "$COVERAGE" ]]; then bash <(curl -s https://codecov.io/bash); fi